=====>
Q:NaN losses during training(迭代到4000多次时，loss NaN)
A:或许跟Nvidia显卡的类型有关，在tf-faster-rcnn/lib/setup.py里，将第130行中的：-arch=sm_52
修改为：-arch=sm_61

=====>
Q:overlaps = entry['max_overlaps']
  KeyError: 'max_overlaps'
  Command exited with non-zero status 1
A:在运行"CUDA_VISIBLE_DEVICES=${GPU_ID} ./tools/demo.py"之前，会软连接一个.default,如下语句：
"""
NET=res101
TRAIN_IMDB=voc_2007_trainval+voc_2012_trainval
mkdir -p output/${NET}/${TRAIN_IMDB}
cd output/${NET}/${TRAIN_IMDB}
ln -s ../../../data/voc_2007_trainval+voc_2012_trainval ./default
cd ../../..
"""
解决方法即，进入output/${NET}/${TRAIN_IMDB}，删除.default即可

=====>
Q:数据集配置
A:数据格式设置如Pascal VOC格式，在VOCdevkit/VOC2007/ImageSets/Main文件夹中，放入trainval.txt
和test.txt，分别用于训练和测试

=====>
Q:训练自己的数据集
A:在tf-faster-rcnn/lib/datasets下，对pascal_voc.py进行修改。修改如下:
在第36行，将如下代码
==============================================================================================
self._classes = ('__background__',  # always index 0
                     'aeroplane', 'bicycle', 'bird', 'boat',
                     'bottle', 'bus', 'car', 'cat', 'chair',
                     'cow', 'diningtable', 'dog', 'horse',
                     'motorbike', 'person', 'pottedplant',
                     'sheep', 'sofa', 'train', 'tvmonitor')
==============================================================================================
改为：
==============================================================================================
self._classes = ('__background__',  # always index 0
                     'youlemei')
==============================================================================================
即可

然后在tf-faster-rcnn/lib/model目录下，对config.py进行修改，根据机器性能进行配置

=====>
Q:如何测试自己的数据集
A:对tf-faster-rcnn/tools下的demo.py进行修改。修改如下：
修改主要地方：
1.服务器上无法显示图像，因此将可视化函数进行修改，直接将结果图像进行保存，指定路径保存
2.根据数据集对类别进行修改，(1)33行CLASSES；(2)__main__中
 net.create_architecture("TEST", 2,tag='default', anchor_scales=[8, 16, 32])
3.指定tfmodel所在路径
4.权限：chmod +x tools/demo.py
5.调用格式：
GPU_ID=0
CUDA_VISIBLE_DEVICES=${GPU_ID} ./tools/demo.py --net=res101 --dataset=pascal_voc
==============================================================================================
#!/usr/bin/env python

# --------------------------------------------------------
# Tensorflow Faster R-CNN
# Licensed under The MIT License [see LICENSE for details]
# Written by Xinlei Chen, based on code from Ross Girshick
# --------------------------------------------------------

"""
Demo script showing detections in sample images.

See README.md for installation instructions before running.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import _init_paths
from model.config import cfg
from model.test import im_detect
from model.nms_wrapper import nms

from utils.timer import Timer
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os, cv2
import argparse

from nets.vgg16 import vgg16
from nets.resnet_v1 import resnetv1

CLASSES = ('__background__',
           'youlemei')

NETS = {'vgg16': ('vgg16_faster_rcnn_iter_70000.ckpt',),'res101': ('res101_faster_rcnn_iter_110000.ckpt',)}
DATASETS= {'pascal_voc': ('voc_2007_trainval',),'pascal_voc_0712': ('voc_2007_trainval+voc_2012_trainval',)}

def vis_detections(im, class_name, dets, thresh=0.5):
    """Draw detected bounding boxes."""
    inds = np.where(dets[:, -1] >= thresh)[0]
    if len(inds) == 0:
        return

    im = im[:, :, (2, 1, 0)]
    fig, ax = plt.subplots(figsize=(12, 12))
    ax.imshow(im, aspect='equal')
    for i in inds:
        bbox = dets[i, :4]
        score = dets[i, -1]

        ax.add_patch(
            plt.Rectangle((bbox[0], bbox[1]),
                          bbox[2] - bbox[0],
                          bbox[3] - bbox[1], fill=False,
                          edgecolor='red', linewidth=3.5)
            )
        ax.text(bbox[0], bbox[1] - 2,
                '{:s} {:.3f}'.format(class_name, score),
                bbox=dict(facecolor='blue', alpha=0.5),
                fontsize=14, color='white')

    ax.set_title(('{} detections with '
                  'p({} | box) >= {:.1f}').format(class_name, class_name,
                                                  thresh),
                  fontsize=14)
    plt.axis('off')
    plt.tight_layout()
    plt.draw()

def print_detection(im_file,im, class_name, dets, thresh=0.5):
    """Draw detected bounding boxes."""
    inds = np.where(dets[:, -1] >= thresh)[0]
    if len(inds) == 0:
        return

    for i in inds:
        bbox = dets[i, :4]
        score = dets[i, -1]
        blue=(255,0,0)
        cv2.rectangle(im,(bbox[0],bbox[1]),(bbox[2],bbox[3]),blue,3)
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(im,'youlemei: '+str(score),(bbox[0],bbox[1]-2),font,0.8,(0,255,0))
        print(("{} detections with p({} | box) >= {:.1f}").format(class_name, class_name,thresh))
    im_file=im_file.split('/')[-1]
    cv2.imwrite(os.path.join("/home/hgobox_wh/proj/tf-faster-rcnn/data/result_img/"+im_file),im)



def demo(sess, net, image_name):
    """Detect object classes in an image using pre-computed object proposals."""

    # Load the demo image
    im_file = os.path.join(cfg.DATA_DIR, 'demo/youlemei', image_name)
    im = cv2.imread(im_file)

    # Detect all object classes and regress object bounds
    timer = Timer()
    timer.tic()
    scores, boxes = im_detect(sess, net, im)
    timer.toc()
    print('Detection took {:.3f}s for {:d} object proposals'.format(timer.total_time, boxes.shape[0]))

    # Visualize detections for each class
    CONF_THRESH = 0.8
    NMS_THRESH = 0.3
    for cls_ind, cls in enumerate(CLASSES[1:]):
        cls_ind += 1 # because we skipped background
        cls_boxes = boxes[:, 4*cls_ind:4*(cls_ind + 1)]
        cls_scores = scores[:, cls_ind]
        dets = np.hstack((cls_boxes,
                          cls_scores[:, np.newaxis])).astype(np.float32)
        keep = nms(dets, NMS_THRESH)
        dets = dets[keep, :]
        # vis_detections(im, cls, dets, thresh=CONF_THRESH)
        print_detection(im_file,im,cls,dets,thresh=CONF_THRESH)

def parse_args():
    """Parse input arguments."""
    parser = argparse.ArgumentParser(description='Tensorflow Faster R-CNN demo')
    parser.add_argument('--net', dest='demo_net', help='Network to use [vgg16 res101]',
                        choices=NETS.keys(), default='res101')
    parser.add_argument('--dataset', dest='dataset', help='Trained dataset [pascal_voc pascal_voc_0712]',
                        choices=DATASETS.keys(), default='pascal_voc_0712')
    args = parser.parse_args()

    return args

if __name__ == '__main__':
    cfg.TEST.HAS_RPN = True  # Use RPN for proposals
    args = parse_args()

    # model path
    demonet = args.demo_net
    dataset = args.dataset
    tfmodel = os.path.join('output', demonet, DATASETS[dataset][0], 'default',
                              NETS[demonet][0])
    tfmodel = os.path.join('output', demonet, DATASETS[dataset][0], 'default',
                           'res101_faster_rcnn_iter_35000.ckpt')
    if not os.path.isfile(tfmodel + '.meta'):
        raise IOError(('{:s} not found.\nDid you download the proper networks from '
                       'our server and place them properly?').format(tfmodel + '.meta'))
    # set config
    tfconfig = tf.ConfigProto(allow_soft_placement=True)
    tfconfig.gpu_options.allow_growth=True

    # init session
    sess = tf.Session(config=tfconfig)
    # load network
    if demonet == 'vgg16':
        net = vgg16()
    elif demonet == 'res101':
        net = resnetv1(num_layers=101)
    else:
        raise NotImplementedError
    net.create_architecture("TEST", 2,
                          tag='default', anchor_scales=[8, 16, 32])
    saver = tf.train.Saver()
    saver.restore(sess, tfmodel)

    print('Loaded network {:s}'.format(tfmodel))
    im_names=[]
    for temp_file in os.listdir("/home/hgobox_wh/proj/tf-faster-rcnn/data/demo/youlemei"):
        im_names.append(temp_file)

    for im_name in im_names:
        print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
        print('Demo for data/demo/{}'.format(im_name))
        demo(sess, net, im_name)

    # plt.show()

==============================================================================================
=====>
Q:Train instructions 
A: cd tf-faster-rcnn/
   ./experiments/scripts/train_faster_rcnn.sh 0 pascal_voc res101  
# format:
# ./experiments/scripts/train_faster_rcnn.sh [GPU_ID] [DATASET] [NET]
# GPU_ID is the GPU you want to test on
# NET in {vgg16, res50, res101, res152} is the network arch to use
# DATASET {pascal_voc, pascal_voc_0712, coco} is defined in train_faster_rcnn.sh

==============================================================================================



